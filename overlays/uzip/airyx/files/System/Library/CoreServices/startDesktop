#!/bin/sh

# Prevent Gnome-related processes at-spi-bus-launcher
# and at-spi2-registryd from bleeding into our system
# https://bbs.archlinux.org/viewtopic.php?pid=1789644#p1789644
export NO_AT_BRIDGE=1

# Start D-Bus and export DBUS_SESSION_BUS_ADDRESS;
# this is needed for D-Bus Activation to work, which gvfs requires to work
if [ -z $DBUS_SESSION_BUS_ADDRESS ] ; then
  export $(dbus-launch)
fi

# Use sysmouse if there is a problem with the touchpad; Credits: NomadBSD
#tpquirk

# Enable tapping on touchpad; Credits: NomadBSD
#enable_tapping

# Export XDG environment variables,
# these may be used by applications that run inside the desktop session

#HERE="$(dirname "$(readlink -f "${0}")")"

export XDG_CACHE_HOME=~/.cache
export XDG_CONFIG_DIRS=/etc:/etc/xdg:/usr/local/etc/xdg:/usr/share:/usr/local/share
export XDG_CONFIG_HOME=~/Library/FreeDesktop/config
export XDG_DATA_DIRS=~/Library/FreeDesktop/share:~/.local/share:/usr/local/share:/usr/share
export XDG_DATA_HOME=~/Library/FreeDesktop/share
export XDG_SESSION_CLASS=user
export XDG_SESSION_TYPE=x11

# When 'sudo -A -E <command>' is executed, use this helper appliction to get the password
export SUDO_ASKPASS=/usr/bin/askpass
# Using sudo.conf resulted in a password dialog when X starts

# Ensure users are never dropped into vi
#export VISUAL=/usr/local/bin/nano
#export EDITOR=/usr/local/bin/nano

##################
# Global menus for Gtk applications
# 
# https://github.com/rilian-la-te/vala-panel-appmenu/blob/master/subprojects/appmenu-gtk-module/README.md
##################

if [ -n "$GTK_MODULES" ]; then
    GTK_MODULES="${GTK_MODULES}:appmenu-gtk-module"
else
    GTK_MODULES="appmenu-gtk-module"
fi

if [ -z "$UBUNTU_MENUPROXY" ]; then
    UBUNTU_MENUPROXY=1
fi

export GTK_MODULES
export UBUNTU_MENUPROXY

# Export other environment variables
#export QT_QPA_PLATFORMTHEME=kde

# Calculate DPI and determine whether we have a HiDPI screen. TODO: Is there a better way?
# Get vertical size in cm
vertical_cm=$(cat /var/log/Xorg.0.log | grep "Max Image Size \[cm\]" | rev |  cut -d ":" -f 1 | rev | xargs | tail -n 1)
# Get vertical size in inches, return int; man units
vertical_inches=$(units -q -t  ${vertical_cm}" cm" inches | cut -d "." -f 1)
# echo "${vertical_inches}"
vertical_pixels=$(cat /var/log/Xorg.0.log | grep "using initial mode" | cut -d x -f 2 | cut -d " " -f 1 | xargs | tail -n 1)
# echo "${vertical_pixels}"
dpi=$(expr "${vertical_pixels}" / "${vertical_inches}")
# echo "${dpi}"
# On some systems, vertical_cm and/or vertical_pixels may not be there; in this case do not assume HiDPI
if [ "${dpi}" -gt 200 ] && [ ! -z "${vertical_cm}" ] && [ ! -z "${vertical_pixels}" ] ; then
  echo "Assuming HiDPI"
  HIDPI="YES"
else
  echo "Not assuming HiDPI"
fi

if [ "$HIDPI" != "" ] ; then
  export QT_SCALE_FACTOR=2
  # Export high-DPI settings:
  # QT_ENABLE_HIGHDPI_SCALING sice Qt 5.14 enables automatic scaling
  # based on the pixel density of the monitor.
  # Replaces QT_AUTO_SCREEN_SCALE_FACTOR.
  # https://lists.qt-project.org/pipermail/development/2019-September/037434.html
  # export QT_ENABLE_HIGHDPI_SCALING=1 # Does not really seem to do anything? Because Xorg always sets DPI to 96 regardless of the facts
  export GDK_SCALE=2 # Working, but only for ints
  # export GDK_DPI_SCALE=1.5 # Not working
  # See https://ricostacruz.com/til/fractional-scaling-on-xorg-linux for a possible solution
  # for other scaling factors
fi

# Launch per-user daemons

# Global keyboard shortcuts
# It reads its configuration from
# ${XDG_CONFIG_HOME}/lxqt/globalkeyshortcuts.conf
# --config-file=FILENAME can be used several times, the last one is used for saving
# TODO: Move this functionality into Menu?
#/usr/local/bin/lxqt-globalkeysd &

# Drop shadows
/usr/bin/picom --dbus &

# Window decorations
#if [ "$HIDPI" = "" ] ; then
#  xrdb -load ~/.Xresources # Ensure a constant font DPI setting; https://linuxreviews.org/HOWTO_set_DPI_in_Xorg
#  /usr/local/bin/openbox --config-file ~/.openbox &
#else
#  xrdb -load ~/.Xresources-2x # Also change cursor size
#  /usr/local/bin/openbox --config-file ~/.openbox-2x &
#fi

# Desktop notifications
#dunst &

# Sound mixer on FreeBSD; would need a space to show tray icons in Menubar;
# should possibly be launched by it if available?
# dsbmixer -i
# Battery monitor, same
# dsbbatmon
# Same for
# dsbmc

# Variable color temperature
# without getlalo it would use network locatization from geoclue2,
# with getlalo it gets the location from /var/db/zoneinfo
# which we posssibly should set in the Welcome Wizard,
# but then the color would be wrong for the Welcome Wizard
# Do not run this if we are running inside a virtual machine
#if [ -z "$VIRTUAL_MACHINE" ] ; then
#  redshift -l$(getlalo) &
#fi

# Welcome Wizard
#uid="$(id -u)"
#if [ -e /System/Welcome.app/Welcome ] ; then
#  if [ ! -e "${HOME}/.config/hello/.helloSetupDone" ] ; then
#    /System/Welcome.app/Welcome
#  fi
#fi

# Menubar
export GTK_MODULES=appmenu-gtk-module
/System/Menu.AppDir/usr/bin/menubar & # FIXME: Use AppRun

# FIXME: Does the next line have to run AFTER menubar?
# Else we see no QMenus at all, as if something was badly crashing?
### "${HERE}"/dde-globalmenu-service & # gmenudbusmenuproxy without Plasma deps

# Desktop
/System/Library/CoreServices/Filer.app/Contents/Airyx/Filer &
konsole &

# Wait for Menu to appear on D-Bus; this is needed for autostart to work properly
while true; do 
  RESULT=$(dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames | grep AppMenu)
  if [ "${RESULT}" != "" ] ; then
    break
  fi
done

/usr/bin/gmenudbusmenuproxy &

# FIXME: replace this with launchd and user preferences
# System-wide autostart
#for APP in /Applications/Autostart/* ; do
#  echo "Autostarting ${APP}"
#  launch "${APP}" &
#done
# Per-user autostart
# for APP in ~/Applications/Autostart/* ; do
#   echo "Autostarting ${APP}"
#   launch "${APP}" &
# done

# Create placeholder .app bundles for applications installed with pkg
#desktop2app &

# Dock
# /System/Dock.AppDir/AppRun & # FIXME: Reinstate once it works like this
#/System/Dock.AppDir/usr/bin/cyber-dock

# Here we must start something that never exits;
# the session ends when that thing exits
exec /usr/bin/kwin_x11
